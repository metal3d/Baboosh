.TH BABOOSH - OOP BASH  "" "" ""
.SH NAME
Baboosh - OOP Bash \- Using OOP in Bash
.\" Man page generated from reStructeredText.
.
.\" Author: - Patrice FERLET
.
.SH ABOUT
.sp
Baboosh is a simple script to include (using \(aq\(aqsource\(aq\(aq command or \(aq\(aq.\(aq\(aq command) into your script to permit to write your script with pseudo Oriented Object syntax.
.sp
Baboosh implements class with "one level" inheritance.
.SH IMPORTING
.sp
In you script, you can use:
.sp
.nf
.ft C
#!/bin/bash
\&. /path/to/baboosh.sh
.ft P
.fi
.sp
If baboosh is in you script path, try this:
.sp
.nf
.ft C
#!/bin/bash
\&. ./baboosh.sh

#or
\&. $(dirname $0)/baboosh.sh
.ft P
.fi
.sp
This includes scripts and set the "new" function.
.SH CREATING CLASSES
.SS class definition
.sp
To create a class, you need to use a list. Each element is formed with: \(aq\(aqtype name\(aq\(aq.
.sp
Types can be:
.INDENT 0.0
.IP \(bu 2
.
function: implements a method
.IP \(bu 2
.
var     : implements a property
.IP \(bu 2
.
extends : set inheritance
.UNINDENT
.IP Caution!
.
\(aq\(aqextends\(aq\(aq must be the first elements on list !
.RE
.sp
To create a human class, you can use this:
.sp
.nf
.ft C
Human=(
    function birth
    function die
    function eat
    function sleep
    var name
)
.ft P
.fi
.SS Methods declaration
.sp
You must implement methods, this way:
.sp
.nf
.ft C
Human::birth(){
    #getting "this" reference
    local this=$1; shift
    #each time you need $this, use an eval... see Tips section
}

Human::die(){
    #...
}

Human::eat(){
    #...
}

Human::sleep(){
    #...
}
.ft P
.fi
.sp
To use \(aq\(aq$this\(aq\(aq please see \fI\%Tips\fP section.
.sp
Now, to instantiate a human named "john" is pretty simple:
.sp
.nf
.ft C
new Human john
.ft P
.fi
.sp
\(aq\(aqjohn\(aq\(aq can birth, die, eat or sleep, like that:
.sp
.nf
.ft C
john.birth
john.sleep
jonh.eat
john.die
.ft P
.fi
.SS Using properties
.sp
To set values, automatic setters should be used:
.sp
.nf
.ft C
john.set_name "John"
.ft P
.fi
.sp
This way, "name" property is set to "John".
.sp
Properties are accessible by \(aq\(aqeval\(aq\(aq (for now...):
.sp
.nf
.ft C
echo $(john.name)
.ft P
.fi
.sp
Keep in mind that property is in fact an alias to an \(aq\(aqecho command\(aq\(aq. Calling \(aq\(aqjohn.name\(aq\(aq will do \(aq\(aqecho "John"\(aq\(aq.
.SS Constructor
.sp
Constructor should not be declared in definition list, this is a special function named \(aq\(aq__init__\(aq\(aq. You only have to implement:
.sp
.nf
.ft C
Human::__init__(){
    #here is a constructor
}
.ft P
.fi
.IP Note
.
inherited child class will call parent constructor implicitly.
.RE
.SH INHERITANCE
.sp
It\(aqs possible to extend classes. For example, an Employee is an Human, so:
.sp
.nf
.ft C
Employee=(
    extends Human
    function work
)

Employee::work(){
    echo "working..."
}
.ft P
.fi
.sp
Now, Employee can birth, eat, sleep and die as Human declared those functions. Employee has got a name, as declared into Human class.
.IP Caution!
.
Limitations
.INDENT 0.0
.IP \(bu 2
.
\(aq\(aqextends\(aq\(aq must be the \fBvery first\fP element in declaration list
.IP \(bu 2
.
redeclaring a method overwrites the parent method. There is no way to access \(aq\(aqparent\(aq\(aq
.UNINDENT
.RE
.sp
As explained in \fI\%Constructor\fP section, Human::__new__ is called when you instantiate Employee.
.SH TIPS
.sp
Remember to use \(aq\(aq$(...)\(aq\(aq to get vars, this is easier to work with values:
.sp
.nf
.ft C
the_name=$(john.name)
.ft P
.fi
.sp
Inside methods, \(aq\(aqthis\(aq\(aq if passed as first argument, so you need to do:
.sp
.nf
.ft C
local this=$1; shift
.ft P
.fi
.sp
\(aq\(aqshift\(aq\(aq is used to unset "$1".
.sp
"this" is now a variable unlike \(aq\(aqjohn\(aq\(aq which is an alias. So, to play with properties, do that:
.sp
.nf
.ft C
#set property
eval $this.set_name "Other"

#read property
prop=$(eval $this.prop)

#call method
eval $this.methodName
.ft P
.fi
.SH COPYRIGHT
.INDENT 0.0
.IP \(bu 2
.
Documentation is under LGPLv3
.IP \(bu 2
.
Baboosh scripts are under BSD Licence
.UNINDENT
.\" Generated by docutils manpage writer.
.\" 
.
